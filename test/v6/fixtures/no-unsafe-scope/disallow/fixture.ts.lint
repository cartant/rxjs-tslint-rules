import { Observable, of } from "rxjs";
import { map, tap } from "rxjs/operators";

let outer: any;

of(1).pipe(tap(value => outer = value)).subscribe();
                        ~~~~~                                                           [no-unsafe-scope]
of(1).subscribe(value => outer = value);
                         ~~~~~                                                          [no-unsafe-scope]

function piped(outer: number): Observable<number> {
    return of(1).pipe(map(value => outer + value));
                                   ~~~~~                                                [no-unsafe-scope]
}

of(new Date()).pipe(
    map(date => outer.getTime())
                ~~~~~                                                                   [no-unsafe-scope]
).subscribe();

of(new Date()).pipe(
    map(date => outer.foo)
                ~~~~~                                                                   [no-unsafe-scope]
).subscribe();

of(new Date()).pipe(
    map(date => date.getTime())
).subscribe();

class User {
    value: string;
    constructor(private name: string, private service: { bar(): string }) {
        of("Hello").pipe(map(value => `${value}, ${this.foo()}.`)).subscribe();
                                                   ~~~~                                 [no-unsafe-scope]
        of("Hello").pipe(map(value => `${value}, ${this.service.bar()}.`)).subscribe();
                                                   ~~~~                                 [no-unsafe-scope]
        of("Hello").subscribe(value => this.value = value);
                                       ~~~~                                             [no-unsafe-scope]
    }
    foo(): string { return "foo"; }
}

[no-unsafe-scope]: Unsafe scopes are forbidden
