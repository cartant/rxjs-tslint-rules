import { combineLatest, of, Subject } from "rxjs";
import { switchMap, takeUntil } from "rxjs/operators";

const a = of("a");
const b = of("b");
const c = of("c");
const d = of("d");

const e = a.pipe(switchMap(_ => b)).subscribe();

const f = a.pipe(switchMap(_ => b), takeUntil(d)).subscribe();

const g = a.pipe(takeUntil(d), s => switchMap(_ => b)).subscribe();

class MyClass {
    someMethod() {
        const e = a.pipe(switchMap(_ => b)).subscribe();

        const f = a.pipe(switchMap(_ => b), takeUntil(d)).subscribe();

        const g = a.pipe(takeUntil(d), s => switchMap(_ => b)).subscribe();
    }
}

@Component({
  selector: 'app-my'
})
class MyComponent {
      ~~~~~~~~~~~                               [enforce-takeuntil-before-unsubscribe-ondestroy]

    private destroy$: Subject<void> = new Subject<void>();

    someMethod() {
        const d = a.subscribe();
                    ~~~~~~~~~                               [enforce-takeuntil-before-unsubscribe]

        const e = a.pipe(switchMap(_ => b)).subscribe();
                                            ~~~~~~~~~                               [enforce-takeuntil-before-unsubscribe]

        const f = a.pipe(switchMap(_ => b), takeUntil(this.destroy$)).subscribe();

        const g = a.pipe(takeUntil(d), s => switchMap(_ => b)).subscribe();
                                                               ~~~~~~~~~            [enforce-takeuntil-before-unsubscribe]

        const f = a.pipe(switchMap(_ => b), takeUntil(d)).subscribe();
                                                      ~            [enforce-takeuntil-before-unsubscribe-subject-name]
    }
}

@Component({
  selector: 'app-my'
})
class MyComponent implements OnDestroy {
    someMethod() {
        const f = a.pipe(switchMap(_ => b), takeUntil(this._destroy$)).subscribe();
    }

    ngOnDestroy() {
    ~~~~~~~~~~~            [enforce-takeuntil-before-unsubscribe-next-missing]
    ~~~~~~~~~~~            [enforce-takeuntil-before-unsubscribe-complete-missing]
      // this._destroy$.next() is missing
      this.destroy$.next();
      this.destroy$.complete();
    }
}

@Component({
  selector: 'app-my'
})
class MyComponent implements SomeInterface, OnDestroy {
    private destroy$: Subject<void> = new Subject<void>();

    someMethod() {
        const e = a.pipe(switchMap(_ => b), takeUntil(this.destroy$)).subscribe();
    }

    ngOnDestroy() {
      this.destroy$.next();
      this.destroy$.complete();
    }
}


[enforce-takeuntil-before-unsubscribe]: subscribe within a component must be preceded by takeUntil
[enforce-takeuntil-before-unsubscribe-subject-name]: takeUntil argument must be one of [this.destroy$, this._destroy$]
[enforce-takeuntil-before-unsubscribe-ondestroy]: component containing subscribe must implement the ngOnDestroy() method
[enforce-takeuntil-before-unsubscribe-next-missing]: there must be an invocation of this._destroy$.next() in ngOnDestroy()
[enforce-takeuntil-before-unsubscribe-complete-missing]: there must be an invocation of this._destroy$.complete() in ngOnDestroy()
