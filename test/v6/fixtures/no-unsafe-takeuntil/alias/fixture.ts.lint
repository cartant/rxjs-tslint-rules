import { combineLatest, of } from "rxjs";
import { switchMap, takeUntil } from "rxjs/operators";

declare const untilDestroyed: Function;

const a = of("a");
const b = of("b");
const c = of("c");
const d = of("d");

const e = a.pipe(takeUntil(d), switchMap(_ => b)).subscribe();
                 ~~~~~~~~~                                                      [no-unsafe-takeuntil]
const f = a.pipe(switchMap(_ => b), takeUntil(d)).subscribe();

const g = a.pipe(takeUntil(d), s => combineLatest(s, b, c)).subscribe();
                 ~~~~~~~~~                                                      [no-unsafe-takeuntil]
const h = a.pipe(s => combineLatest(s, b, c), takeUntil(d)).subscribe();

const i = a.pipe(untilDestroyed(d), switchMap(_ => b)).subscribe();
                 ~~~~~~~~~~~~~~                                                 [no-unsafe-takeuntil]
const j = a.pipe(switchMap(_ => b), untilDestroyed(d)).subscribe();

const k = a.pipe(untilDestroyed(d), s => combineLatest(s, b, c)).subscribe();
                 ~~~~~~~~~~~~~~                                                 [no-unsafe-takeuntil]
const l = a.pipe(s => combineLatest(s, b, c), untilDestroyed(d)).subscribe();

[no-unsafe-takeuntil]: Applying operators after takeUntil is forbidden
